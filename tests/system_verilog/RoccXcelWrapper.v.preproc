
module RoccXcelWrapper
(
  input  wire [   0:0] clk,
  output reg  [   0:0] io_busy,
  input  wire [   6:0] io_cmd_bits_inst_funct,
  input  wire [   6:0] io_cmd_bits_inst_opcode,
  input  wire [   4:0] io_cmd_bits_inst_rd,
  input  wire [   4:0] io_cmd_bits_inst_rs1,
  input  wire [   4:0] io_cmd_bits_inst_rs2,
  input  wire [   0:0] io_cmd_bits_inst_xd,
  input  wire [   0:0] io_cmd_bits_inst_xs1,
  input  wire [   0:0] io_cmd_bits_inst_xs2,
  input  wire [  63:0] io_cmd_bits_rs1,
  input  wire [  63:0] io_cmd_bits_rs2,
  output wire [   0:0] io_cmd_ready,
  input  wire [   0:0] io_cmd_valid,
  input  wire [  63:0] io_manycore_req_msg,
  output wire [   0:0] io_manycore_req_rdy,
  input  wire [   0:0] io_manycore_req_val,
  output wire [  39:0] io_mem_req_bits_addr,
  output wire [   4:0] io_mem_req_bits_cmd,
  output wire [  63:0] io_mem_req_bits_data,
  output wire [   0:0] io_mem_req_bits_phys,
  output wire [   9:0] io_mem_req_bits_tag,
  output wire [   2:0] io_mem_req_bits_typ,
  input  wire [   0:0] io_mem_req_ready,
  output wire [   0:0] io_mem_req_valid,
  input  wire [  39:0] io_mem_resp_bits_addr,
  input  wire [   4:0] io_mem_resp_bits_cmd,
  input  wire [  63:0] io_mem_resp_bits_data,
  input  wire [  63:0] io_mem_resp_bits_data_word_bypass,
  input  wire [   0:0] io_mem_resp_bits_has_data,
  input  wire [   0:0] io_mem_resp_bits_nack,
  input  wire [   0:0] io_mem_resp_bits_replay,
  input  wire [  63:0] io_mem_resp_bits_store_data,
  input  wire [   9:0] io_mem_resp_bits_tag,
  input  wire [   2:0] io_mem_resp_bits_typ,
  input  wire [   0:0] io_mem_resp_valid,
  output wire [  63:0] io_resp_bits_data,
  output wire [   4:0] io_resp_bits_rd,
  input  wire [   0:0] io_resp_ready,
  output wire [   0:0] io_resp_valid,
  input  wire [   0:0] reset
);

    wire   [   0:0] mem_adapter$clk;
  wire   [ 109:0] mem_adapter$xcel_mem_req_msg;
  wire   [   0:0] mem_adapter$xcel_mem_req_val;
  wire   [  39:0] mem_adapter$mem_resp_bits_addr;
  wire   [   4:0] mem_adapter$mem_resp_bits_cmd;
  wire   [  63:0] mem_adapter$mem_resp_bits_data;
  wire   [  63:0] mem_adapter$mem_resp_bits_data_word_bypass;
  wire   [   0:0] mem_adapter$mem_resp_bits_has_data;
  wire   [   0:0] mem_adapter$mem_resp_bits_nack;
  wire   [   0:0] mem_adapter$mem_resp_bits_replay;
  wire   [  63:0] mem_adapter$mem_resp_bits_store_data;
  wire   [   9:0] mem_adapter$mem_resp_bits_tag;
  wire   [   2:0] mem_adapter$mem_resp_bits_typ;
  wire   [   0:0] mem_adapter$mem_resp_valid;
  wire   [   0:0] mem_adapter$mem_req_ready;
  wire   [   0:0] mem_adapter$reset;
  wire   [   0:0] mem_adapter$xcel_mem_resp_rdy;
  wire   [   0:0] mem_adapter$busy;
  wire   [   0:0] mem_adapter$xcel_mem_req_rdy;
  wire   [  39:0] mem_adapter$mem_req_bits_addr;
  wire   [   4:0] mem_adapter$mem_req_bits_cmd;
  wire   [  63:0] mem_adapter$mem_req_bits_data;
  wire   [   0:0] mem_adapter$mem_req_bits_phys;
  wire   [   9:0] mem_adapter$mem_req_bits_tag;
  wire   [   2:0] mem_adapter$mem_req_bits_typ;
  wire   [   0:0] mem_adapter$mem_req_valid;
  wire   [  79:0] mem_adapter$xcel_mem_resp_msg;
  wire   [   0:0] mem_adapter$xcel_mem_resp_val;

  MemToRoccMemAdapter_0x2befdccdf2a6d297 mem_adapter
  (
    .clk                            ( mem_adapter$clk ),
    .xcel_mem_req_msg               ( mem_adapter$xcel_mem_req_msg ),
    .xcel_mem_req_val               ( mem_adapter$xcel_mem_req_val ),
    .mem_resp_bits_addr             ( mem_adapter$mem_resp_bits_addr ),
    .mem_resp_bits_cmd              ( mem_adapter$mem_resp_bits_cmd ),
    .mem_resp_bits_data             ( mem_adapter$mem_resp_bits_data ),
    .mem_resp_bits_data_word_bypass ( mem_adapter$mem_resp_bits_data_word_bypass ),
    .mem_resp_bits_has_data         ( mem_adapter$mem_resp_bits_has_data ),
    .mem_resp_bits_nack             ( mem_adapter$mem_resp_bits_nack ),
    .mem_resp_bits_replay           ( mem_adapter$mem_resp_bits_replay ),
    .mem_resp_bits_store_data       ( mem_adapter$mem_resp_bits_store_data ),
    .mem_resp_bits_tag              ( mem_adapter$mem_resp_bits_tag ),
    .mem_resp_bits_typ              ( mem_adapter$mem_resp_bits_typ ),
    .mem_resp_valid                 ( mem_adapter$mem_resp_valid ),
    .mem_req_ready                  ( mem_adapter$mem_req_ready ),
    .reset                          ( mem_adapter$reset ),
    .xcel_mem_resp_rdy              ( mem_adapter$xcel_mem_resp_rdy ),
    .busy                           ( mem_adapter$busy ),
    .xcel_mem_req_rdy               ( mem_adapter$xcel_mem_req_rdy ),
    .mem_req_bits_addr              ( mem_adapter$mem_req_bits_addr ),
    .mem_req_bits_cmd               ( mem_adapter$mem_req_bits_cmd ),
    .mem_req_bits_data              ( mem_adapter$mem_req_bits_data ),
    .mem_req_bits_phys              ( mem_adapter$mem_req_bits_phys ),
    .mem_req_bits_tag               ( mem_adapter$mem_req_bits_tag ),
    .mem_req_bits_typ               ( mem_adapter$mem_req_bits_typ ),
    .mem_req_valid                  ( mem_adapter$mem_req_valid ),
    .xcel_mem_resp_msg              ( mem_adapter$xcel_mem_resp_msg ),
    .xcel_mem_resp_val              ( mem_adapter$xcel_mem_resp_val )
  );

    wire   [  39:0] sneak_path$rocket_mem_resp_bits_addr;
  wire   [   4:0] sneak_path$rocket_mem_resp_bits_cmd;
  wire   [  63:0] sneak_path$rocket_mem_resp_bits_data;
  wire   [  63:0] sneak_path$rocket_mem_resp_bits_data_word_bypass;
  wire   [   0:0] sneak_path$rocket_mem_resp_bits_has_data;
  wire   [   0:0] sneak_path$rocket_mem_resp_bits_nack;
  wire   [   0:0] sneak_path$rocket_mem_resp_bits_replay;
  wire   [  63:0] sneak_path$rocket_mem_resp_bits_store_data;
  wire   [   9:0] sneak_path$rocket_mem_resp_bits_tag;
  wire   [   2:0] sneak_path$rocket_mem_resp_bits_typ;
  wire   [   0:0] sneak_path$rocket_mem_resp_valid;
  wire   [   0:0] sneak_path$clk;
  wire   [  39:0] sneak_path$xcel_mem_req_bits_addr;
  wire   [   4:0] sneak_path$xcel_mem_req_bits_cmd;
  wire   [  63:0] sneak_path$xcel_mem_req_bits_data;
  wire   [   0:0] sneak_path$xcel_mem_req_bits_phys;
  wire   [   9:0] sneak_path$xcel_mem_req_bits_tag;
  wire   [   2:0] sneak_path$xcel_mem_req_bits_typ;
  wire   [   0:0] sneak_path$xcel_mem_req_valid;
  wire   [   0:0] sneak_path$reset;
  wire   [  63:0] sneak_path$manycore_req_msg;
  wire   [   0:0] sneak_path$manycore_req_val;
  wire   [   0:0] sneak_path$rocket_mem_req_ready;
  wire   [   0:0] sneak_path$xcel_mem_req_ready;
  wire   [   0:0] sneak_path$manycore_req_rdy;
  wire   [  39:0] sneak_path$rocket_mem_req_bits_addr;
  wire   [   4:0] sneak_path$rocket_mem_req_bits_cmd;
  wire   [  63:0] sneak_path$rocket_mem_req_bits_data;
  wire   [   0:0] sneak_path$rocket_mem_req_bits_phys;
  wire   [   9:0] sneak_path$rocket_mem_req_bits_tag;
  wire   [   2:0] sneak_path$rocket_mem_req_bits_typ;
  wire   [   0:0] sneak_path$rocket_mem_req_valid;
  wire   [  39:0] sneak_path$xcel_mem_resp_bits_addr;
  wire   [   4:0] sneak_path$xcel_mem_resp_bits_cmd;
  wire   [  63:0] sneak_path$xcel_mem_resp_bits_data;
  wire   [  63:0] sneak_path$xcel_mem_resp_bits_data_word_bypass;
  wire   [   0:0] sneak_path$xcel_mem_resp_bits_has_data;
  wire   [   0:0] sneak_path$xcel_mem_resp_bits_nack;
  wire   [   0:0] sneak_path$xcel_mem_resp_bits_replay;
  wire   [  63:0] sneak_path$xcel_mem_resp_bits_store_data;
  wire   [   9:0] sneak_path$xcel_mem_resp_bits_tag;
  wire   [   2:0] sneak_path$xcel_mem_resp_bits_typ;
  wire   [   0:0] sneak_path$xcel_mem_resp_valid;

  SneakPathRedirect sneak_path
  (
    .rocket_mem_resp_bits_addr             ( sneak_path$rocket_mem_resp_bits_addr ),
    .rocket_mem_resp_bits_cmd              ( sneak_path$rocket_mem_resp_bits_cmd ),
    .rocket_mem_resp_bits_data             ( sneak_path$rocket_mem_resp_bits_data ),
    .rocket_mem_resp_bits_data_word_bypass ( sneak_path$rocket_mem_resp_bits_data_word_bypass ),
    .rocket_mem_resp_bits_has_data         ( sneak_path$rocket_mem_resp_bits_has_data ),
    .rocket_mem_resp_bits_nack             ( sneak_path$rocket_mem_resp_bits_nack ),
    .rocket_mem_resp_bits_replay           ( sneak_path$rocket_mem_resp_bits_replay ),
    .rocket_mem_resp_bits_store_data       ( sneak_path$rocket_mem_resp_bits_store_data ),
    .rocket_mem_resp_bits_tag              ( sneak_path$rocket_mem_resp_bits_tag ),
    .rocket_mem_resp_bits_typ              ( sneak_path$rocket_mem_resp_bits_typ ),
    .rocket_mem_resp_valid                 ( sneak_path$rocket_mem_resp_valid ),
    .clk                                   ( sneak_path$clk ),
    .xcel_mem_req_bits_addr                ( sneak_path$xcel_mem_req_bits_addr ),
    .xcel_mem_req_bits_cmd                 ( sneak_path$xcel_mem_req_bits_cmd ),
    .xcel_mem_req_bits_data                ( sneak_path$xcel_mem_req_bits_data ),
    .xcel_mem_req_bits_phys                ( sneak_path$xcel_mem_req_bits_phys ),
    .xcel_mem_req_bits_tag                 ( sneak_path$xcel_mem_req_bits_tag ),
    .xcel_mem_req_bits_typ                 ( sneak_path$xcel_mem_req_bits_typ ),
    .xcel_mem_req_valid                    ( sneak_path$xcel_mem_req_valid ),
    .reset                                 ( sneak_path$reset ),
    .manycore_req_msg                      ( sneak_path$manycore_req_msg ),
    .manycore_req_val                      ( sneak_path$manycore_req_val ),
    .rocket_mem_req_ready                  ( sneak_path$rocket_mem_req_ready ),
    .xcel_mem_req_ready                    ( sneak_path$xcel_mem_req_ready ),
    .manycore_req_rdy                      ( sneak_path$manycore_req_rdy ),
    .rocket_mem_req_bits_addr              ( sneak_path$rocket_mem_req_bits_addr ),
    .rocket_mem_req_bits_cmd               ( sneak_path$rocket_mem_req_bits_cmd ),
    .rocket_mem_req_bits_data              ( sneak_path$rocket_mem_req_bits_data ),
    .rocket_mem_req_bits_phys              ( sneak_path$rocket_mem_req_bits_phys ),
    .rocket_mem_req_bits_tag               ( sneak_path$rocket_mem_req_bits_tag ),
    .rocket_mem_req_bits_typ               ( sneak_path$rocket_mem_req_bits_typ ),
    .rocket_mem_req_valid                  ( sneak_path$rocket_mem_req_valid ),
    .xcel_mem_resp_bits_addr               ( sneak_path$xcel_mem_resp_bits_addr ),
    .xcel_mem_resp_bits_cmd                ( sneak_path$xcel_mem_resp_bits_cmd ),
    .xcel_mem_resp_bits_data               ( sneak_path$xcel_mem_resp_bits_data ),
    .xcel_mem_resp_bits_data_word_bypass   ( sneak_path$xcel_mem_resp_bits_data_word_bypass ),
    .xcel_mem_resp_bits_has_data           ( sneak_path$xcel_mem_resp_bits_has_data ),
    .xcel_mem_resp_bits_nack               ( sneak_path$xcel_mem_resp_bits_nack ),
    .xcel_mem_resp_bits_replay             ( sneak_path$xcel_mem_resp_bits_replay ),
    .xcel_mem_resp_bits_store_data         ( sneak_path$xcel_mem_resp_bits_store_data ),
    .xcel_mem_resp_bits_tag                ( sneak_path$xcel_mem_resp_bits_tag ),
    .xcel_mem_resp_bits_typ                ( sneak_path$xcel_mem_resp_bits_typ ),
    .xcel_mem_resp_valid                   ( sneak_path$xcel_mem_resp_valid )
  );

    wire   [  79:0] xcel$memresp_msg;
  wire   [   0:0] xcel$memresp_val;
  wire   [ 159:0] xcel$xcelreq_msg;
  wire   [   0:0] xcel$xcelreq_val;
  wire   [   0:0] xcel$clk;
  wire   [   0:0] xcel$reset;
  wire   [   0:0] xcel$memreq_rdy;
  wire   [   0:0] xcel$xcelresp_rdy;
  wire   [   0:0] xcel$memresp_rdy;
  wire   [   0:0] xcel$xcelreq_rdy;
  wire   [ 109:0] xcel$memreq_msg;
  wire   [   0:0] xcel$memreq_val;
  wire   [  68:0] xcel$xcelresp_msg;
  wire   [   0:0] xcel$xcelresp_val;

  BnnXcelHLS_0x2e9f1d2da3d1f4f1 xcel
  (
    .memresp_msg  ( xcel$memresp_msg ),
    .memresp_val  ( xcel$memresp_val ),
    .xcelreq_msg  ( xcel$xcelreq_msg ),
    .xcelreq_val  ( xcel$xcelreq_val ),
    .clk          ( xcel$clk ),
    .reset        ( xcel$reset ),
    .memreq_rdy   ( xcel$memreq_rdy ),
    .xcelresp_rdy ( xcel$xcelresp_rdy ),
    .memresp_rdy  ( xcel$memresp_rdy ),
    .xcelreq_rdy  ( xcel$xcelreq_rdy ),
    .memreq_msg   ( xcel$memreq_msg ),
    .memreq_val   ( xcel$memreq_val ),
    .xcelresp_msg ( xcel$xcelresp_msg ),
    .xcelresp_val ( xcel$xcelresp_val )
  );

    wire   [   0:0] xcel_adapter$xcel_req_rdy;
  wire   [   0:0] xcel_adapter$clk;
  wire   [   0:0] xcel_adapter$core_resp_ready;
  wire   [  68:0] xcel_adapter$xcel_resp_msg;
  wire   [   0:0] xcel_adapter$xcel_resp_val;
  wire   [   6:0] xcel_adapter$core_cmd_bits_inst_funct;
  wire   [   6:0] xcel_adapter$core_cmd_bits_inst_opcode;
  wire   [   4:0] xcel_adapter$core_cmd_bits_inst_rd;
  wire   [   4:0] xcel_adapter$core_cmd_bits_inst_rs1;
  wire   [   4:0] xcel_adapter$core_cmd_bits_inst_rs2;
  wire   [   0:0] xcel_adapter$core_cmd_bits_inst_xd;
  wire   [   0:0] xcel_adapter$core_cmd_bits_inst_xs1;
  wire   [   0:0] xcel_adapter$core_cmd_bits_inst_xs2;
  wire   [  63:0] xcel_adapter$core_cmd_bits_rs1;
  wire   [  63:0] xcel_adapter$core_cmd_bits_rs2;
  wire   [   0:0] xcel_adapter$core_cmd_valid;
  wire   [   0:0] xcel_adapter$reset;
  wire   [ 159:0] xcel_adapter$xcel_req_msg;
  wire   [   0:0] xcel_adapter$xcel_req_val;
  wire   [  63:0] xcel_adapter$core_resp_bits_data;
  wire   [   4:0] xcel_adapter$core_resp_bits_rd;
  wire   [   0:0] xcel_adapter$core_resp_valid;
  wire   [   0:0] xcel_adapter$xcel_resp_rdy;
  wire   [   0:0] xcel_adapter$core_cmd_ready;

  RoccXcelToXcelAdapter_0x24071e4a80c2de5d xcel_adapter
  (
    .xcel_req_rdy              ( xcel_adapter$xcel_req_rdy ),
    .clk                       ( xcel_adapter$clk ),
    .core_resp_ready           ( xcel_adapter$core_resp_ready ),
    .xcel_resp_msg             ( xcel_adapter$xcel_resp_msg ),
    .xcel_resp_val             ( xcel_adapter$xcel_resp_val ),
    .core_cmd_bits_inst_funct  ( xcel_adapter$core_cmd_bits_inst_funct ),
    .core_cmd_bits_inst_opcode ( xcel_adapter$core_cmd_bits_inst_opcode ),
    .core_cmd_bits_inst_rd     ( xcel_adapter$core_cmd_bits_inst_rd ),
    .core_cmd_bits_inst_rs1    ( xcel_adapter$core_cmd_bits_inst_rs1 ),
    .core_cmd_bits_inst_rs2    ( xcel_adapter$core_cmd_bits_inst_rs2 ),
    .core_cmd_bits_inst_xd     ( xcel_adapter$core_cmd_bits_inst_xd ),
    .core_cmd_bits_inst_xs1    ( xcel_adapter$core_cmd_bits_inst_xs1 ),
    .core_cmd_bits_inst_xs2    ( xcel_adapter$core_cmd_bits_inst_xs2 ),
    .core_cmd_bits_rs1         ( xcel_adapter$core_cmd_bits_rs1 ),
    .core_cmd_bits_rs2         ( xcel_adapter$core_cmd_bits_rs2 ),
    .core_cmd_valid            ( xcel_adapter$core_cmd_valid ),
    .reset                     ( xcel_adapter$reset ),
    .xcel_req_msg              ( xcel_adapter$xcel_req_msg ),
    .xcel_req_val              ( xcel_adapter$xcel_req_val ),
    .core_resp_bits_data       ( xcel_adapter$core_resp_bits_data ),
    .core_resp_bits_rd         ( xcel_adapter$core_resp_bits_rd ),
    .core_resp_valid           ( xcel_adapter$core_resp_valid ),
    .xcel_resp_rdy             ( xcel_adapter$xcel_resp_rdy ),
    .core_cmd_ready            ( xcel_adapter$core_cmd_ready )
  );

    assign io_cmd_ready                                     = xcel_adapter$core_cmd_ready;
  assign io_manycore_req_rdy                              = sneak_path$manycore_req_rdy;
  assign io_mem_req_bits_addr                             = sneak_path$rocket_mem_req_bits_addr;
  assign io_mem_req_bits_cmd                              = sneak_path$rocket_mem_req_bits_cmd;
  assign io_mem_req_bits_data                             = sneak_path$rocket_mem_req_bits_data;
  assign io_mem_req_bits_phys                             = sneak_path$rocket_mem_req_bits_phys;
  assign io_mem_req_bits_tag                              = sneak_path$rocket_mem_req_bits_tag;
  assign io_mem_req_bits_typ                              = sneak_path$rocket_mem_req_bits_typ;
  assign io_mem_req_valid                                 = sneak_path$rocket_mem_req_valid;
  assign io_resp_bits_data                                = xcel_adapter$core_resp_bits_data;
  assign io_resp_bits_rd                                  = xcel_adapter$core_resp_bits_rd;
  assign io_resp_valid                                    = xcel_adapter$core_resp_valid;
  assign mem_adapter$clk                                  = clk;
  assign mem_adapter$mem_req_ready                        = sneak_path$xcel_mem_req_ready;
  assign mem_adapter$mem_resp_bits_addr                   = sneak_path$xcel_mem_resp_bits_addr;
  assign mem_adapter$mem_resp_bits_cmd                    = sneak_path$xcel_mem_resp_bits_cmd;
  assign mem_adapter$mem_resp_bits_data                   = sneak_path$xcel_mem_resp_bits_data;
  assign mem_adapter$mem_resp_bits_data_word_bypass       = sneak_path$xcel_mem_resp_bits_data_word_bypass;
  assign mem_adapter$mem_resp_bits_has_data               = sneak_path$xcel_mem_resp_bits_has_data;
  assign mem_adapter$mem_resp_bits_nack                   = sneak_path$xcel_mem_resp_bits_nack;
  assign mem_adapter$mem_resp_bits_replay                 = sneak_path$xcel_mem_resp_bits_replay;
  assign mem_adapter$mem_resp_bits_store_data             = sneak_path$xcel_mem_resp_bits_store_data;
  assign mem_adapter$mem_resp_bits_tag                    = sneak_path$xcel_mem_resp_bits_tag;
  assign mem_adapter$mem_resp_bits_typ                    = sneak_path$xcel_mem_resp_bits_typ;
  assign mem_adapter$mem_resp_valid                       = sneak_path$xcel_mem_resp_valid;
  assign mem_adapter$reset                                = reset;
  assign mem_adapter$xcel_mem_req_msg                     = xcel$memreq_msg;
  assign mem_adapter$xcel_mem_req_val                     = xcel$memreq_val;
  assign mem_adapter$xcel_mem_resp_rdy                    = xcel$memresp_rdy;
  assign sneak_path$clk                                   = clk;
  assign sneak_path$manycore_req_msg                      = io_manycore_req_msg;
  assign sneak_path$manycore_req_val                      = io_manycore_req_val;
  assign sneak_path$reset                                 = reset;
  assign sneak_path$rocket_mem_req_ready                  = io_mem_req_ready;
  assign sneak_path$rocket_mem_resp_bits_addr             = io_mem_resp_bits_addr;
  assign sneak_path$rocket_mem_resp_bits_cmd              = io_mem_resp_bits_cmd;
  assign sneak_path$rocket_mem_resp_bits_data             = io_mem_resp_bits_data;
  assign sneak_path$rocket_mem_resp_bits_data_word_bypass = io_mem_resp_bits_data_word_bypass;
  assign sneak_path$rocket_mem_resp_bits_has_data         = io_mem_resp_bits_has_data;
  assign sneak_path$rocket_mem_resp_bits_nack             = io_mem_resp_bits_nack;
  assign sneak_path$rocket_mem_resp_bits_replay           = io_mem_resp_bits_replay;
  assign sneak_path$rocket_mem_resp_bits_store_data       = io_mem_resp_bits_store_data;
  assign sneak_path$rocket_mem_resp_bits_tag              = io_mem_resp_bits_tag;
  assign sneak_path$rocket_mem_resp_bits_typ              = io_mem_resp_bits_typ;
  assign sneak_path$rocket_mem_resp_valid                 = io_mem_resp_valid;
  assign sneak_path$xcel_mem_req_bits_addr                = mem_adapter$mem_req_bits_addr;
  assign sneak_path$xcel_mem_req_bits_cmd                 = mem_adapter$mem_req_bits_cmd;
  assign sneak_path$xcel_mem_req_bits_data                = mem_adapter$mem_req_bits_data;
  assign sneak_path$xcel_mem_req_bits_phys                = mem_adapter$mem_req_bits_phys;
  assign sneak_path$xcel_mem_req_bits_tag                 = mem_adapter$mem_req_bits_tag;
  assign sneak_path$xcel_mem_req_bits_typ                 = mem_adapter$mem_req_bits_typ;
  assign sneak_path$xcel_mem_req_valid                    = mem_adapter$mem_req_valid;
  assign xcel$clk                                         = clk;
  assign xcel$memreq_rdy                                  = mem_adapter$xcel_mem_req_rdy;
  assign xcel$memresp_msg                                 = mem_adapter$xcel_mem_resp_msg;
  assign xcel$memresp_val                                 = mem_adapter$xcel_mem_resp_val;
  assign xcel$reset                                       = reset;
  assign xcel$xcelreq_msg                                 = xcel_adapter$xcel_req_msg;
  assign xcel$xcelreq_val                                 = xcel_adapter$xcel_req_val;
  assign xcel$xcelresp_rdy                                = xcel_adapter$xcel_resp_rdy;
  assign xcel_adapter$clk                                 = clk;
  assign xcel_adapter$core_cmd_bits_inst_funct            = io_cmd_bits_inst_funct;
  assign xcel_adapter$core_cmd_bits_inst_opcode           = io_cmd_bits_inst_opcode;
  assign xcel_adapter$core_cmd_bits_inst_rd               = io_cmd_bits_inst_rd;
  assign xcel_adapter$core_cmd_bits_inst_rs1              = io_cmd_bits_inst_rs1;
  assign xcel_adapter$core_cmd_bits_inst_rs2              = io_cmd_bits_inst_rs2;
  assign xcel_adapter$core_cmd_bits_inst_xd               = io_cmd_bits_inst_xd;
  assign xcel_adapter$core_cmd_bits_inst_xs1              = io_cmd_bits_inst_xs1;
  assign xcel_adapter$core_cmd_bits_inst_xs2              = io_cmd_bits_inst_xs2;
  assign xcel_adapter$core_cmd_bits_rs1                   = io_cmd_bits_rs1;
  assign xcel_adapter$core_cmd_bits_rs2                   = io_cmd_bits_rs2;
  assign xcel_adapter$core_cmd_valid                      = io_cmd_valid;
  assign xcel_adapter$core_resp_ready                     = io_resp_ready;
  assign xcel_adapter$reset                               = reset;
  assign xcel_adapter$xcel_req_rdy                        = xcel$xcelreq_rdy;
  assign xcel_adapter$xcel_resp_msg                       = xcel$xcelresp_msg;
  assign xcel_adapter$xcel_resp_val                       = xcel$xcelresp_val;


          
    always @ (*) begin
    io_busy = mem_adapter$busy;
  end


endmodule 


module MemToRoccMemAdapter_0x2befdccdf2a6d297
(
  output reg  [   0:0] busy,
  input  wire [   0:0] clk,
  output reg  [  39:0] mem_req_bits_addr,
  output reg  [   4:0] mem_req_bits_cmd,
  output reg  [  63:0] mem_req_bits_data,
  output reg  [   0:0] mem_req_bits_phys,
  output reg  [   9:0] mem_req_bits_tag,
  output reg  [   2:0] mem_req_bits_typ,
  input  wire [   0:0] mem_req_ready,
  output reg  [   0:0] mem_req_valid,
  input  wire [  39:0] mem_resp_bits_addr,
  input  wire [   4:0] mem_resp_bits_cmd,
  input  wire [  63:0] mem_resp_bits_data,
  input  wire [  63:0] mem_resp_bits_data_word_bypass,
  input  wire [   0:0] mem_resp_bits_has_data,
  input  wire [   0:0] mem_resp_bits_nack,
  input  wire [   0:0] mem_resp_bits_replay,
  input  wire [  63:0] mem_resp_bits_store_data,
  input  wire [   9:0] mem_resp_bits_tag,
  input  wire [   2:0] mem_resp_bits_typ,
  input  wire [   0:0] mem_resp_valid,
  input  wire [   0:0] reset,
  input  wire [ 109:0] xcel_mem_req_msg,
  output reg  [   0:0] xcel_mem_req_rdy,
  input  wire [   0:0] xcel_mem_req_val,
  output reg  [  79:0] xcel_mem_resp_msg,
  input  wire [   0:0] xcel_mem_resp_rdy,
  output reg  [   0:0] xcel_mem_resp_val
);

    wire   [   9:0] tags$000;
  wire   [   9:0] tags$001;
  wire   [   9:0] tags$002;
  wire   [   9:0] tags$003;
  wire   [   9:0] tags$004;
  wire   [   9:0] tags$005;
  wire   [   9:0] tags$006;
  wire   [   9:0] tags$007;
  wire   [   9:0] tags$008;
  wire   [   9:0] tags$009;
  wire   [   9:0] tags$010;
  wire   [   9:0] tags$011;
  wire   [   9:0] tags$012;
  wire   [   9:0] tags$013;
  wire   [   9:0] tags$014;
  wire   [   9:0] tags$015;
  wire   [   9:0] next_tags$000;
  wire   [   9:0] next_tags$001;
  wire   [   9:0] next_tags$002;
  wire   [   9:0] next_tags$003;
  wire   [   9:0] next_tags$004;
  wire   [   9:0] next_tags$005;
  wire   [   9:0] next_tags$006;
  wire   [   9:0] next_tags$007;
  wire   [   9:0] next_tags$008;
  wire   [   9:0] next_tags$009;
  wire   [   9:0] next_tags$010;
  wire   [   9:0] next_tags$011;
  wire   [   9:0] next_tags$012;
  wire   [   9:0] next_tags$013;
  wire   [   9:0] next_tags$014;
  wire   [   9:0] next_tags$015;
  wire   [  63:0] data$000;
  wire   [  63:0] data$001;
  wire   [  63:0] data$002;
  wire   [  63:0] data$003;
  wire   [  63:0] data$004;
  wire   [  63:0] data$005;
  wire   [  63:0] data$006;
  wire   [  63:0] data$007;
  wire   [  63:0] data$008;
  wire   [  63:0] data$009;
  wire   [  63:0] data$010;
  wire   [  63:0] data$011;
  wire   [  63:0] data$012;
  wire   [  63:0] data$013;
  wire   [  63:0] data$014;
  wire   [  63:0] data$015;
  wire   [  63:0] next_data$000;
  wire   [  63:0] next_data$001;
  wire   [  63:0] next_data$002;
  wire   [  63:0] next_data$003;
  wire   [  63:0] next_data$004;
  wire   [  63:0] next_data$005;
  wire   [  63:0] next_data$006;
  wire   [  63:0] next_data$007;
  wire   [  63:0] next_data$008;
  wire   [  63:0] next_data$009;
  wire   [  63:0] next_data$010;
  wire   [  63:0] next_data$011;
  wire   [  63:0] next_data$012;
  wire   [  63:0] next_data$013;
  wire   [  63:0] next_data$014;
  wire   [  63:0] next_data$015;


    reg    [   3:0] head;
  reg    [   3:0] next_head;
  reg    [  15:0] next_rdylist;
  reg    [   3:0] next_tail;
  reg    [  15:0] next_valid;
  reg    [   3:0] ptr;
  reg    [  15:0] rdylist;
  reg    [   3:0] tail;
  reg    [  63:0] tmp_data;
  reg    [  31:0] tmp_msgaddr;
  reg    [  63:0] tmp_msgdata;
  reg    [   7:0] tmp_msgtag;
  reg    [   9:0] tmp_tag;
  reg    [  15:0] valid;
  reg    [  39:0] wire_mem_req_bits_addr;
  reg    [   4:0] wire_mem_req_bits_cmd;
  reg    [  63:0] wire_mem_req_bits_data;
  reg    [   0:0] wire_mem_req_bits_phys;
  reg    [   9:0] wire_mem_req_bits_tag;
  reg    [   2:0] wire_mem_req_bits_typ;
  reg    [   0:0] wire_mem_req_valid;
  reg    [   0:0] wire_xcel_mem_req_rdy;
  reg    [  79:0] wire_xcel_mem_resp_msg;
  reg    [   0:0] wire_xcel_mem_resp_val;

    localparam LOAD = 0;
  localparam STORE = 1;
  localparam TYPE_WRITE = 1;
  localparam addr_sz = 32;
  localparam data_sz = 64;
  localparam max_len = 3;
  localparam nreqs_nbits = 4;
  localparam num_of_reqs = 16;
  localparam tag_sz = 8;

    integer i;


    reg    [  63:0] data[0:15];
  assign data$000 = data[  0];
  assign data$001 = data[  1];
  assign data$002 = data[  2];
  assign data$003 = data[  3];
  assign data$004 = data[  4];
  assign data$005 = data[  5];
  assign data$006 = data[  6];
  assign data$007 = data[  7];
  assign data$008 = data[  8];
  assign data$009 = data[  9];
  assign data$010 = data[ 10];
  assign data$011 = data[ 11];
  assign data$012 = data[ 12];
  assign data$013 = data[ 13];
  assign data$014 = data[ 14];
  assign data$015 = data[ 15];
  reg    [  63:0] next_data[0:15];
  assign next_data$000 = next_data[  0];
  assign next_data$001 = next_data[  1];
  assign next_data$002 = next_data[  2];
  assign next_data$003 = next_data[  3];
  assign next_data$004 = next_data[  4];
  assign next_data$005 = next_data[  5];
  assign next_data$006 = next_data[  6];
  assign next_data$007 = next_data[  7];
  assign next_data$008 = next_data[  8];
  assign next_data$009 = next_data[  9];
  assign next_data$010 = next_data[ 10];
  assign next_data$011 = next_data[ 11];
  assign next_data$012 = next_data[ 12];
  assign next_data$013 = next_data[ 13];
  assign next_data$014 = next_data[ 14];
  assign next_data$015 = next_data[ 15];
  reg    [   9:0] next_tags[0:15];
  assign next_tags$000 = next_tags[  0];
  assign next_tags$001 = next_tags[  1];
  assign next_tags$002 = next_tags[  2];
  assign next_tags$003 = next_tags[  3];
  assign next_tags$004 = next_tags[  4];
  assign next_tags$005 = next_tags[  5];
  assign next_tags$006 = next_tags[  6];
  assign next_tags$007 = next_tags[  7];
  assign next_tags$008 = next_tags[  8];
  assign next_tags$009 = next_tags[  9];
  assign next_tags$010 = next_tags[ 10];
  assign next_tags$011 = next_tags[ 11];
  assign next_tags$012 = next_tags[ 12];
  assign next_tags$013 = next_tags[ 13];
  assign next_tags$014 = next_tags[ 14];
  assign next_tags$015 = next_tags[ 15];
  reg    [   9:0] tags[0:15];
  assign tags$000 = tags[  0];
  assign tags$001 = tags[  1];
  assign tags$002 = tags[  2];
  assign tags$003 = tags[  3];
  assign tags$004 = tags[  4];
  assign tags$005 = tags[  5];
  assign tags$006 = tags[  6];
  assign tags$007 = tags[  7];
  assign tags$008 = tags[  8];
  assign tags$009 = tags[  9];
  assign tags$010 = tags[ 10];
  assign tags$011 = tags[ 11];
  assign tags$012 = tags[ 12];
  assign tags$013 = tags[ 13];
  assign tags$014 = tags[ 14];
  assign tags$015 = tags[ 15];

                                    
    always @ (posedge clk) begin
    head <= next_head;
    tail <= next_tail;
    rdylist <= next_rdylist;
    valid <= next_valid;
    for (i=0; i < num_of_reqs; i=i+1)
    begin
      data[i] <= next_data[i];
      tags[i] <= next_tags[i];
    end
  end

                                                                                                                                                                                                                                                                                                                                                                                                      
    always @ (*) begin
    tmp_msgdata = 0;
    tmp_msgaddr = 0;
    tmp_msgtag = 0;
    next_head = head;
    next_tail = tail;
    next_valid = valid;
    next_rdylist = rdylist;
    for (i=0; i < num_of_reqs; i=i+1)
    begin
      next_data[i] = data[i];
      next_tags[i] = tags[i];
    end
    ptr = 0;
    wire_xcel_mem_req_rdy = 0;
    wire_xcel_mem_resp_val = 0;
    wire_xcel_mem_resp_msg = 0;
    wire_mem_req_valid = 0;
    wire_mem_req_bits_addr = 0;
    tmp_msgaddr = xcel_mem_req_msg[(99)-1:67];
    wire_mem_req_bits_addr[(addr_sz)-1:0] = tmp_msgaddr[(addr_sz)-1:0];
    wire_mem_req_bits_data = 0;
    tmp_msgdata = xcel_mem_req_msg[(64)-1:0];
    wire_mem_req_bits_data[(data_sz)-1:0] = tmp_msgdata[(data_sz)-1:0];
    wire_mem_req_bits_tag = next_tail;
    wire_mem_req_bits_cmd = 0;
    wire_mem_req_bits_typ = max_len;
    wire_mem_req_bits_phys = 0;
    if ((xcel_mem_req_msg[(110)-1:107] == TYPE_WRITE)) begin
      wire_mem_req_bits_cmd = STORE;
    end
    else begin
      wire_mem_req_bits_cmd = LOAD;
    end
    if ((xcel_mem_resp_msg[(67)-1:64] <= 0)) begin
      wire_mem_req_bits_typ = max_len;
    end
    else begin
      if ((xcel_mem_resp_msg[(67)-1:64] <= 1)) begin
        wire_mem_req_bits_typ = 0;
      end
      else begin
        if ((xcel_mem_resp_msg[(67)-1:64] <= 2)) begin
          wire_mem_req_bits_typ = 1;
        end
        else begin
          if ((xcel_mem_resp_msg[(67)-1:64] <= 4)) begin
            wire_mem_req_bits_typ = 2;
          end
          else begin
            if ((xcel_mem_resp_msg[(67)-1:64] <= 8)) begin
              wire_mem_req_bits_typ = 3;
            end
            else begin
              wire_mem_req_bits_typ = max_len;
            end
          end
        end
      end
    end
    if (mem_resp_valid) begin
      ptr = mem_resp_bits_tag[(nreqs_nbits)-1:0];
      next_rdylist[ptr] = 1;
      next_data[ptr] = mem_resp_bits_data;
    end
    else begin
    end
    if ((next_rdylist[next_head]&&next_valid[next_head])) begin
      wire_xcel_mem_resp_val = 1;
      tmp_tag = next_tags[next_head];
      tmp_data = next_data[next_head];
      tmp_msgtag = 0;
      tmp_msgtag[(tag_sz)-1:0] = tmp_tag[(tag_sz)-1:0];
      wire_xcel_mem_resp_msg[(77)-1:69] = tmp_msgtag;
      tmp_msgdata = 0;
      tmp_msgdata[(data_sz)-1:0] = tmp_data[(data_sz)-1:0];
      wire_xcel_mem_resp_msg[(64)-1:0] = tmp_msgdata;
      if (xcel_mem_resp_rdy) begin
        next_rdylist[next_head] = 0;
        next_valid[next_head] = 0;
        next_head = (next_head+1);
        if ((next_head >= num_of_reqs)) begin
          next_head = 0;
        end
        else begin
        end
      end
      else begin
      end
    end
    else begin
    end
    if ((!next_valid[next_tail]&&mem_req_ready)) begin
      wire_xcel_mem_req_rdy = 1;
      if (xcel_mem_req_val) begin
        tmp_data = 0;
        tmp_tag = 0;
        tmp_msgdata = xcel_mem_req_msg[(64)-1:0];
        tmp_data[(data_sz)-1:0] = tmp_msgdata[(data_sz)-1:0];
        tmp_msgtag = xcel_mem_req_msg[(107)-1:99];
        tmp_tag[(tag_sz)-1:0] = tmp_msgtag[(tag_sz)-1:0];
        next_data[next_tail] = tmp_data;
        next_tags[next_tail] = tmp_tag;
        wire_mem_req_valid = 1;
        next_valid[next_tail] = 1;
        next_tail = (next_tail+1);
        if ((next_tail >= num_of_reqs)) begin
          next_tail = 0;
        end
        else begin
        end
      end
      else begin
      end
    end
    else begin
    end
    if (reset) begin
      next_head = 0;
      next_tail = 0;
      next_rdylist = 0;
      next_valid = 0;
      for (i=0; i < num_of_reqs; i=i+1)
      begin
        next_data[i] = 0;
        next_tags[i] = 0;
      end
      xcel_mem_req_rdy = 0;
      xcel_mem_resp_val = 0;
      xcel_mem_resp_msg = 0;
      mem_req_valid = 0;
      mem_req_bits_addr = 0;
      mem_req_bits_data = 0;
      mem_req_bits_tag = 0;
      mem_req_bits_cmd = 0;
      mem_req_bits_typ = 3;
      mem_req_bits_phys = 0;
      busy = 0;
    end
    else begin
      xcel_mem_req_rdy = wire_xcel_mem_req_rdy;
      xcel_mem_resp_val = wire_xcel_mem_resp_val;
      xcel_mem_resp_msg = wire_xcel_mem_resp_msg;
      mem_req_valid = wire_mem_req_valid;
      mem_req_bits_addr = wire_mem_req_bits_addr;
      mem_req_bits_data = wire_mem_req_bits_data;
      mem_req_bits_tag = wire_mem_req_bits_tag;
      mem_req_bits_cmd = wire_mem_req_bits_cmd;
      mem_req_bits_typ = wire_mem_req_bits_typ;
      mem_req_bits_phys = wire_mem_req_bits_phys;
      busy = ((next_head != next_tail)||((next_head == next_tail)&&next_valid[next_head]));
    end
  end


endmodule 


module SneakPathRedirect
(
  input  wire [   0:0] clk,
  input  wire [  63:0] manycore_req_msg,
  output wire [   0:0] manycore_req_rdy,
  input  wire [   0:0] manycore_req_val,
  input  wire [   0:0] reset,
  output reg  [  39:0] rocket_mem_req_bits_addr,
  output reg  [   4:0] rocket_mem_req_bits_cmd,
  output reg  [  63:0] rocket_mem_req_bits_data,
  output reg  [   0:0] rocket_mem_req_bits_phys,
  output reg  [   9:0] rocket_mem_req_bits_tag,
  output reg  [   2:0] rocket_mem_req_bits_typ,
  input  wire [   0:0] rocket_mem_req_ready,
  output reg  [   0:0] rocket_mem_req_valid,
  input  wire [  39:0] rocket_mem_resp_bits_addr,
  input  wire [   4:0] rocket_mem_resp_bits_cmd,
  input  wire [  63:0] rocket_mem_resp_bits_data,
  input  wire [  63:0] rocket_mem_resp_bits_data_word_bypass,
  input  wire [   0:0] rocket_mem_resp_bits_has_data,
  input  wire [   0:0] rocket_mem_resp_bits_nack,
  input  wire [   0:0] rocket_mem_resp_bits_replay,
  input  wire [  63:0] rocket_mem_resp_bits_store_data,
  input  wire [   9:0] rocket_mem_resp_bits_tag,
  input  wire [   2:0] rocket_mem_resp_bits_typ,
  input  wire [   0:0] rocket_mem_resp_valid,
  input  wire [  39:0] xcel_mem_req_bits_addr,
  input  wire [   4:0] xcel_mem_req_bits_cmd,
  input  wire [  63:0] xcel_mem_req_bits_data,
  input  wire [   0:0] xcel_mem_req_bits_phys,
  input  wire [   9:0] xcel_mem_req_bits_tag,
  input  wire [   2:0] xcel_mem_req_bits_typ,
  output reg  [   0:0] xcel_mem_req_ready,
  input  wire [   0:0] xcel_mem_req_valid,
  output reg  [  39:0] xcel_mem_resp_bits_addr,
  output reg  [   4:0] xcel_mem_resp_bits_cmd,
  output reg  [  63:0] xcel_mem_resp_bits_data,
  output reg  [  63:0] xcel_mem_resp_bits_data_word_bypass,
  output reg  [   0:0] xcel_mem_resp_bits_has_data,
  output reg  [   0:0] xcel_mem_resp_bits_nack,
  output reg  [   0:0] xcel_mem_resp_bits_replay,
  output reg  [  63:0] xcel_mem_resp_bits_store_data,
  output reg  [   9:0] xcel_mem_resp_bits_tag,
  output reg  [   2:0] xcel_mem_resp_bits_typ,
  output reg  [   0:0] xcel_mem_resp_valid
);

    reg    [   0:0] manycore_fifo$deq_rdy;
  reg    [   0:0] passthrough_val;
  reg    [   0:0] redirect_fifo$deq_rdy;
  reg    [ 122:0] redirect_fifo$enq_msg;
  reg    [   0:0] redirect_fifo$enq_val;
  reg    [   0:0] redirect_val;
  reg    [ 252:0] reg_rocket_mem_resp;
  reg    [   0:0] reg_rocket_mem_resp_valid;
  reg    [   0:0] rocket_mem_req_fifo$deq_rdy;
  reg    [ 122:0] rocket_mem_req_fifo$enq_msg;
  reg    [   0:0] rocket_mem_req_fifo$enq_val;
  reg    [ 252:0] sneak_path_resp_msg;
  reg    [   0:0] sneak_path_resp_val;
  reg    [   0:0] special_addr_match;
  reg    [   0:0] use_sneak_path;
  reg    [ 122:0] xcel_mem_req_msg;
  reg    [   0:0] xcel_mem_req_ready_mux$sel;
  reg    [   0:0] xcel_mem_resp_msg_mux$sel;

    localparam sneak_path_special_addr = 64d2147483648;

    wire   [   0:0] manycore_fifo$clk;
  wire   [  63:0] manycore_fifo$enq_msg;
  wire   [   0:0] manycore_fifo$enq_val;
  wire   [   0:0] manycore_fifo$reset;
  wire   [   0:0] manycore_fifo$enq_rdy;
  wire   [   3:0] manycore_fifo$num_free_entries;
  wire   [  63:0] manycore_fifo$deq_msg;
  wire   [   0:0] manycore_fifo$deq_val;

  NormalQueue_0x3e69ea77d859f5f manycore_fifo
  (
    .clk              ( manycore_fifo$clk ),
    .enq_msg          ( manycore_fifo$enq_msg ),
    .enq_val          ( manycore_fifo$enq_val ),
    .reset            ( manycore_fifo$reset ),
    .deq_rdy          ( manycore_fifo$deq_rdy ),
    .enq_rdy          ( manycore_fifo$enq_rdy ),
    .num_free_entries ( manycore_fifo$num_free_entries ),
    .deq_msg          ( manycore_fifo$deq_msg ),
    .deq_val          ( manycore_fifo$deq_val )
  );

    wire   [   0:0] redirect_fifo$clk;
  wire   [   0:0] redirect_fifo$reset;
  wire   [   0:0] redirect_fifo$enq_rdy;
  wire   [   1:0] redirect_fifo$num_free_entries;
  wire   [ 122:0] redirect_fifo$deq_msg;
  wire   [   0:0] redirect_fifo$deq_val;

  NormalQueue_0x5dd41d218822a9f2 redirect_fifo
  (
    .clk              ( redirect_fifo$clk ),
    .enq_msg          ( redirect_fifo$enq_msg ),
    .enq_val          ( redirect_fifo$enq_val ),
    .reset            ( redirect_fifo$reset ),
    .deq_rdy          ( redirect_fifo$deq_rdy ),
    .enq_rdy          ( redirect_fifo$enq_rdy ),
    .num_free_entries ( redirect_fifo$num_free_entries ),
    .deq_msg          ( redirect_fifo$deq_msg ),
    .deq_val          ( redirect_fifo$deq_val )
  );

    wire   [   0:0] xcel_mem_resp_msg_mux$reset;
  wire   [ 252:0] xcel_mem_resp_msg_mux$in_$000;
  wire   [ 252:0] xcel_mem_resp_msg_mux$in_$001;
  wire   [   0:0] xcel_mem_resp_msg_mux$clk;
  wire   [ 252:0] xcel_mem_resp_msg_mux$out;

  Mux_0x1912657ca4782f9b xcel_mem_resp_msg_mux
  (
    .reset   ( xcel_mem_resp_msg_mux$reset ),
    .in_$000 ( xcel_mem_resp_msg_mux$in_$000 ),
    .in_$001 ( xcel_mem_resp_msg_mux$in_$001 ),
    .clk     ( xcel_mem_resp_msg_mux$clk ),
    .sel     ( xcel_mem_resp_msg_mux$sel ),
    .out     ( xcel_mem_resp_msg_mux$out )
  );

    wire   [   0:0] xcel_mem_req_ready_mux$reset;
  wire   [   0:0] xcel_mem_req_ready_mux$in_$000;
  wire   [   0:0] xcel_mem_req_ready_mux$in_$001;
  wire   [   0:0] xcel_mem_req_ready_mux$clk;
  wire   [   0:0] xcel_mem_req_ready_mux$out;

  Mux_0x5dd7789b2f4c8d77 xcel_mem_req_ready_mux
  (
    .reset   ( xcel_mem_req_ready_mux$reset ),
    .in_$000 ( xcel_mem_req_ready_mux$in_$000 ),
    .in_$001 ( xcel_mem_req_ready_mux$in_$001 ),
    .clk     ( xcel_mem_req_ready_mux$clk ),
    .sel     ( xcel_mem_req_ready_mux$sel ),
    .out     ( xcel_mem_req_ready_mux$out )
  );

    wire   [   0:0] rocket_mem_req_fifo$clk;
  wire   [   0:0] rocket_mem_req_fifo$reset;
  wire   [   0:0] rocket_mem_req_fifo$enq_rdy;
  wire   [   1:0] rocket_mem_req_fifo$num_free_entries;
  wire   [ 122:0] rocket_mem_req_fifo$deq_msg;
  wire   [   0:0] rocket_mem_req_fifo$deq_val;

  NormalQueue_0x5dd41d218822a9f2 rocket_mem_req_fifo
  (
    .clk              ( rocket_mem_req_fifo$clk ),
    .enq_msg          ( rocket_mem_req_fifo$enq_msg ),
    .enq_val          ( rocket_mem_req_fifo$enq_val ),
    .reset            ( rocket_mem_req_fifo$reset ),
    .deq_rdy          ( rocket_mem_req_fifo$deq_rdy ),
    .enq_rdy          ( rocket_mem_req_fifo$enq_rdy ),
    .num_free_entries ( rocket_mem_req_fifo$num_free_entries ),
    .deq_msg          ( rocket_mem_req_fifo$deq_msg ),
    .deq_val          ( rocket_mem_req_fifo$deq_val )
  );

    assign manycore_fifo$clk            = clk;
  assign manycore_fifo$enq_msg        = manycore_req_msg;
  assign manycore_fifo$enq_val        = manycore_req_val;
  assign manycore_fifo$reset          = reset;
  assign manycore_req_rdy             = manycore_fifo$enq_rdy;
  assign redirect_fifo$clk            = clk;
  assign redirect_fifo$reset          = reset;
  assign rocket_mem_req_fifo$clk      = clk;
  assign rocket_mem_req_fifo$reset    = reset;
  assign xcel_mem_req_ready_mux$clk   = clk;
  assign xcel_mem_req_ready_mux$reset = reset;
  assign xcel_mem_resp_msg_mux$clk    = clk;
  assign xcel_mem_resp_msg_mux$reset  = reset;

    reg    [   0:0] xcel_mem_req_ready_mux$in_[0:1];
  assign xcel_mem_req_ready_mux$in_$000 = xcel_mem_req_ready_mux$in_[  0];
  assign xcel_mem_req_ready_mux$in_$001 = xcel_mem_req_ready_mux$in_[  1];
  reg    [ 252:0] xcel_mem_resp_msg_mux$in_[0:1];
  assign xcel_mem_resp_msg_mux$in_$000 = xcel_mem_resp_msg_mux$in_[  0];
  assign xcel_mem_resp_msg_mux$in_$001 = xcel_mem_resp_msg_mux$in_[  1];

                                            
    always @ (posedge clk) begin
    if (reset) begin
      reg_rocket_mem_resp_valid <= 0;
      reg_rocket_mem_resp <= 0;
    end
    else begin
      reg_rocket_mem_resp_valid <= rocket_mem_resp_valid;
      if (rocket_mem_resp_valid) begin
        reg_rocket_mem_resp[(253)-1:213] <= rocket_mem_resp_bits_addr;
        reg_rocket_mem_resp[(213)-1:203] <= rocket_mem_resp_bits_tag;
        reg_rocket_mem_resp[(203)-1:198] <= rocket_mem_resp_bits_cmd;
        reg_rocket_mem_resp[(198)-1:195] <= rocket_mem_resp_bits_typ;
        reg_rocket_mem_resp[(195)-1:131] <= rocket_mem_resp_bits_data;
        reg_rocket_mem_resp[(131)-1:130] <= rocket_mem_resp_bits_nack;
        reg_rocket_mem_resp[(130)-1:129] <= rocket_mem_resp_bits_replay;
        reg_rocket_mem_resp[(129)-1:128] <= rocket_mem_resp_bits_has_data;
        reg_rocket_mem_resp[(128)-1:64] <= rocket_mem_resp_bits_data_word_bypass;
        reg_rocket_mem_resp[(64)-1:0] <= rocket_mem_resp_bits_store_data;
      end
      else begin
      end
    end
  end

                                  
    always @ (*) begin
    rocket_mem_req_fifo$deq_rdy = rocket_mem_req_ready;
    rocket_mem_req_valid = rocket_mem_req_fifo$deq_val;
    rocket_mem_req_bits_addr = rocket_mem_req_fifo$deq_msg[(123)-1:83];
    rocket_mem_req_bits_tag = rocket_mem_req_fifo$deq_msg[(83)-1:73];
    rocket_mem_req_bits_cmd = rocket_mem_req_fifo$deq_msg[(73)-1:68];
    rocket_mem_req_bits_typ = rocket_mem_req_fifo$deq_msg[(68)-1:65];
    rocket_mem_req_bits_phys = rocket_mem_req_fifo$deq_msg[(65)-1:64];
    rocket_mem_req_bits_data = rocket_mem_req_fifo$deq_msg[(64)-1:0];
  end

                        
    always @ (*) begin
    special_addr_match = (xcel_mem_req_bits_addr >= sneak_path_special_addr);
    passthrough_val = (xcel_mem_req_valid&~special_addr_match);
    redirect_val = (xcel_mem_req_valid&special_addr_match);
  end

              
    always @ (*) begin
    xcel_mem_req_ready_mux$in_[0] = rocket_mem_req_fifo$enq_rdy;
    xcel_mem_req_ready_mux$in_[1] = redirect_fifo$enq_rdy;
    xcel_mem_req_ready_mux$sel = special_addr_match;
  end

          
    always @ (*) begin
    xcel_mem_req_ready = xcel_mem_req_ready_mux$out;
  end

                            
    always @ (*) begin
    rocket_mem_req_fifo$enq_val = passthrough_val;
    rocket_mem_req_fifo$enq_msg[(123)-1:83] = xcel_mem_req_bits_addr;
    rocket_mem_req_fifo$enq_msg[(83)-1:73] = xcel_mem_req_bits_tag;
    rocket_mem_req_fifo$enq_msg[(73)-1:68] = xcel_mem_req_bits_cmd;
    rocket_mem_req_fifo$enq_msg[(68)-1:65] = xcel_mem_req_bits_typ;
    rocket_mem_req_fifo$enq_msg[(65)-1:64] = xcel_mem_req_bits_phys;
    rocket_mem_req_fifo$enq_msg[(64)-1:0] = xcel_mem_req_bits_data;
  end

                                
    always @ (*) begin
    redirect_fifo$enq_val = redirect_val;
    xcel_mem_req_msg[(123)-1:83] = xcel_mem_req_bits_addr;
    xcel_mem_req_msg[(83)-1:73] = xcel_mem_req_bits_tag;
    xcel_mem_req_msg[(73)-1:68] = xcel_mem_req_bits_cmd;
    xcel_mem_req_msg[(68)-1:65] = xcel_mem_req_bits_typ;
    xcel_mem_req_msg[(65)-1:64] = xcel_mem_req_bits_phys;
    xcel_mem_req_msg[(64)-1:0] = xcel_mem_req_bits_data;
    redirect_fifo$enq_msg = xcel_mem_req_msg;
  end

          
    always @ (*) begin
    use_sneak_path = ~reg_rocket_mem_resp_valid;
  end

                                                    
    always @ (*) begin
    sneak_path_resp_msg[(253)-1:213] = redirect_fifo$deq_msg[(123)-1:83];
    sneak_path_resp_msg[(213)-1:203] = redirect_fifo$deq_msg[(83)-1:73];
    sneak_path_resp_msg[(203)-1:198] = redirect_fifo$deq_msg[(73)-1:68];
    sneak_path_resp_msg[(198)-1:195] = redirect_fifo$deq_msg[(68)-1:65];
    sneak_path_resp_msg[(131)-1:130] = 0;
    sneak_path_resp_msg[(130)-1:129] = 0;
    sneak_path_resp_msg[(129)-1:128] = 0;
    sneak_path_resp_msg[(128)-1:64] = 0;
    sneak_path_resp_msg[(64)-1:0] = 0;
    sneak_path_resp_msg[(195)-1:131] = manycore_fifo$deq_msg;
    sneak_path_resp_val = (redirect_fifo$deq_val&manycore_fifo$deq_val);
  end

            
    always @ (*) begin
    redirect_fifo$deq_rdy = (use_sneak_path&sneak_path_resp_val);
    manycore_fifo$deq_rdy = (use_sneak_path&sneak_path_resp_val);
  end

                    
    always @ (*) begin
    xcel_mem_resp_msg_mux$in_[0] = reg_rocket_mem_resp;
    xcel_mem_resp_msg_mux$in_[1] = sneak_path_resp_msg;
    xcel_mem_resp_msg_mux$sel = use_sneak_path;
  end

                                      
    always @ (*) begin
    xcel_mem_resp_valid = (reg_rocket_mem_resp_valid|sneak_path_resp_val);
    xcel_mem_resp_bits_addr = xcel_mem_resp_msg_mux$out[(253)-1:213];
    xcel_mem_resp_bits_tag = xcel_mem_resp_msg_mux$out[(213)-1:203];
    xcel_mem_resp_bits_cmd = xcel_mem_resp_msg_mux$out[(203)-1:198];
    xcel_mem_resp_bits_typ = xcel_mem_resp_msg_mux$out[(198)-1:195];
    xcel_mem_resp_bits_data = xcel_mem_resp_msg_mux$out[(195)-1:131];
    xcel_mem_resp_bits_nack = xcel_mem_resp_msg_mux$out[(131)-1:130];
    xcel_mem_resp_bits_replay = xcel_mem_resp_msg_mux$out[(130)-1:129];
    xcel_mem_resp_bits_has_data = xcel_mem_resp_msg_mux$out[(129)-1:128];
    xcel_mem_resp_bits_data_word_bypass = xcel_mem_resp_msg_mux$out[(128)-1:64];
    xcel_mem_resp_bits_store_data = xcel_mem_resp_msg_mux$out[(64)-1:0];
  end


endmodule 


module NormalQueue_0x3e69ea77d859f5f
(
  input  wire [   0:0] clk,
  output wire [  63:0] deq_msg,
  input  wire [   0:0] deq_rdy,
  output wire [   0:0] deq_val,
  input  wire [  63:0] enq_msg,
  output wire [   0:0] enq_rdy,
  input  wire [   0:0] enq_val,
  output wire [   3:0] num_free_entries,
  input  wire [   0:0] reset
);

    wire   [   0:0] ctrl$clk;
  wire   [   0:0] ctrl$enq_val;
  wire   [   0:0] ctrl$reset;
  wire   [   0:0] ctrl$deq_rdy;
  wire   [   2:0] ctrl$waddr;
  wire   [   0:0] ctrl$wen;
  wire   [   0:0] ctrl$deq_val;
  wire   [   2:0] ctrl$raddr;
  wire   [   3:0] ctrl$num_free_entries;
  wire   [   0:0] ctrl$enq_rdy;

  NormalQueueCtrl_0x49516a237c810023 ctrl
  (
    .clk              ( ctrl$clk ),
    .enq_val          ( ctrl$enq_val ),
    .reset            ( ctrl$reset ),
    .deq_rdy          ( ctrl$deq_rdy ),
    .waddr            ( ctrl$waddr ),
    .wen              ( ctrl$wen ),
    .deq_val          ( ctrl$deq_val ),
    .raddr            ( ctrl$raddr ),
    .num_free_entries ( ctrl$num_free_entries ),
    .enq_rdy          ( ctrl$enq_rdy )
  );

    wire   [   2:0] dpath$waddr;
  wire   [   0:0] dpath$clk;
  wire   [   0:0] dpath$wen;
  wire   [   2:0] dpath$raddr;
  wire   [   0:0] dpath$reset;
  wire   [  63:0] dpath$enq_bits;
  wire   [  63:0] dpath$deq_bits;

  NormalQueueDpath_0x3e69ea77d859f5f dpath
  (
    .waddr    ( dpath$waddr ),
    .clk      ( dpath$clk ),
    .wen      ( dpath$wen ),
    .raddr    ( dpath$raddr ),
    .reset    ( dpath$reset ),
    .enq_bits ( dpath$enq_bits ),
    .deq_bits ( dpath$deq_bits )
  );

    assign ctrl$clk         = clk;
  assign ctrl$deq_rdy     = deq_rdy;
  assign ctrl$enq_val     = enq_val;
  assign ctrl$reset       = reset;
  assign deq_msg          = dpath$deq_bits;
  assign deq_val          = ctrl$deq_val;
  assign dpath$clk        = clk;
  assign dpath$enq_bits   = enq_msg;
  assign dpath$raddr      = ctrl$raddr;
  assign dpath$reset      = reset;
  assign dpath$waddr      = ctrl$waddr;
  assign dpath$wen        = ctrl$wen;
  assign enq_rdy          = ctrl$enq_rdy;
  assign num_free_entries = ctrl$num_free_entries;



endmodule 


module NormalQueueCtrl_0x49516a237c810023
(
  input  wire [   0:0] clk,
  input  wire [   0:0] deq_rdy,
  output reg  [   0:0] deq_val,
  output reg  [   0:0] enq_rdy,
  input  wire [   0:0] enq_val,
  output reg  [   3:0] num_free_entries,
  output reg  [   2:0] raddr,
  input  wire [   0:0] reset,
  output reg  [   2:0] waddr,
  output reg  [   0:0] wen
);

    reg    [   2:0] deq_ptr;
  reg    [   2:0] deq_ptr_inc;
  reg    [   2:0] deq_ptr_next;
  reg    [   0:0] do_deq;
  reg    [   0:0] do_enq;
  reg    [   0:0] empty;
  reg    [   2:0] enq_ptr;
  reg    [   2:0] enq_ptr_inc;
  reg    [   2:0] enq_ptr_next;
  reg    [   0:0] full;
  reg    [   0:0] full_next_cycle;

    localparam last_idx = 7;
  localparam num_entries = 8;



                              
    always @ (posedge clk) begin
    if (reset) begin
      deq_ptr <= 0;
    end
    else begin
      deq_ptr <= deq_ptr_next;
    end
    if (reset) begin
      enq_ptr <= 0;
    end
    else begin
      enq_ptr <= enq_ptr_next;
    end
    if (reset) begin
      full <= 0;
    end
    else begin
      if (full_next_cycle) begin
        full <= 1;
      end
      else begin
        if ((do_deq&&full)) begin
          full <= 0;
        end
        else begin
          full <= full;
        end
      end
    end
  end

                                                                                                                
    always @ (*) begin
    empty = (!full&&(enq_ptr == deq_ptr));
    enq_rdy = !full;
    deq_val = !empty;
    do_enq = (enq_rdy&&enq_val);
    do_deq = (deq_rdy&&deq_val);
    wen = do_enq;
    waddr = enq_ptr;
    raddr = deq_ptr;
    if ((enq_ptr == last_idx)) begin
      enq_ptr_inc = 0;
    end
    else begin
      enq_ptr_inc = (enq_ptr+1);
    end
    if ((deq_ptr == last_idx)) begin
      deq_ptr_inc = 0;
    end
    else begin
      deq_ptr_inc = (deq_ptr+1);
    end
    if (do_enq) begin
      enq_ptr_next = enq_ptr_inc;
    end
    else begin
      enq_ptr_next = enq_ptr;
    end
    if (do_deq) begin
      deq_ptr_next = deq_ptr_inc;
    end
    else begin
      deq_ptr_next = deq_ptr;
    end
    if (reset) begin
      num_free_entries = num_entries;
    end
    else begin
      if (full) begin
        num_free_entries = 0;
      end
      else begin
        if (empty) begin
          num_free_entries = num_entries;
        end
        else begin
          if ((enq_ptr > deq_ptr)) begin
            num_free_entries = (num_entries-(enq_ptr-deq_ptr));
          end
          else begin
            if ((deq_ptr > enq_ptr)) begin
              num_free_entries = (deq_ptr-enq_ptr);
            end
            else begin
            end
          end
        end
      end
    end
    full_next_cycle = (do_enq&&!do_deq&&(enq_ptr_next == deq_ptr));
  end


endmodule 


module NormalQueueDpath_0x3e69ea77d859f5f
(
  input  wire [   0:0] clk,
  output wire [  63:0] deq_bits,
  input  wire [  63:0] enq_bits,
  input  wire [   2:0] raddr,
  input  wire [   0:0] reset,
  input  wire [   2:0] waddr,
  input  wire [   0:0] wen
);

    wire   [   2:0] queue$rd_addr$000;
  wire   [  63:0] queue$wr_data;
  wire   [   0:0] queue$clk;
  wire   [   2:0] queue$wr_addr;
  wire   [   0:0] queue$wr_en;
  wire   [   0:0] queue$reset;
  wire   [  63:0] queue$rd_data$000;

  RegisterFile_0x4dc0c4f176070666 queue
  (
    .rd_addr$000 ( queue$rd_addr$000 ),
    .wr_data     ( queue$wr_data ),
    .clk         ( queue$clk ),
    .wr_addr     ( queue$wr_addr ),
    .wr_en       ( queue$wr_en ),
    .reset       ( queue$reset ),
    .rd_data$000 ( queue$rd_data$000 )
  );

    assign deq_bits          = queue$rd_data$000;
  assign queue$clk         = clk;
  assign queue$rd_addr$000 = raddr;
  assign queue$reset       = reset;
  assign queue$wr_addr     = waddr;
  assign queue$wr_data     = enq_bits;
  assign queue$wr_en       = wen;



endmodule 


module RegisterFile_0x4dc0c4f176070666
(
  input  wire [   0:0] clk,
  input  wire [   2:0] rd_addr$000,
  output wire [  63:0] rd_data$000,
  input  wire [   0:0] reset,
  input  wire [   2:0] wr_addr,
  input  wire [  63:0] wr_data,
  input  wire [   0:0] wr_en
);

    wire   [  63:0] regs$000;
  wire   [  63:0] regs$001;
  wire   [  63:0] regs$002;
  wire   [  63:0] regs$003;
  wire   [  63:0] regs$004;
  wire   [  63:0] regs$005;
  wire   [  63:0] regs$006;
  wire   [  63:0] regs$007;


    localparam nregs = 8;
  localparam rd_ports = 1;

    integer i;


    wire   [   2:0] rd_addr[0:0];
  assign rd_addr[  0] = rd_addr$000;
  reg    [  63:0] rd_data[0:0];
  assign rd_data$000 = rd_data[  0];
  reg    [  63:0] regs[0:7];
  assign regs$000 = regs[  0];
  assign regs$001 = regs[  1];
  assign regs$002 = regs[  2];
  assign regs$003 = regs[  3];
  assign regs$004 = regs[  4];
  assign regs$005 = regs[  5];
  assign regs$006 = regs[  6];
  assign regs$007 = regs[  7];

            
    always @ (posedge clk) begin
    if (wr_en) begin
      regs[wr_addr] <= wr_data;
    end
    else begin
    end
  end

              
    always @ (*) begin
    for (i=0; i < rd_ports; i=i+1)
    begin
      rd_data[i] = regs[rd_addr[i]];
    end
  end


endmodule 


module NormalQueue_0x5dd41d218822a9f2
(
  input  wire [   0:0] clk,
  output wire [ 122:0] deq_msg,
  input  wire [   0:0] deq_rdy,
  output wire [   0:0] deq_val,
  input  wire [ 122:0] enq_msg,
  output wire [   0:0] enq_rdy,
  input  wire [   0:0] enq_val,
  output wire [   1:0] num_free_entries,
  input  wire [   0:0] reset
);

    wire   [   0:0] ctrl$clk;
  wire   [   0:0] ctrl$enq_val;
  wire   [   0:0] ctrl$reset;
  wire   [   0:0] ctrl$deq_rdy;
  wire   [   0:0] ctrl$waddr;
  wire   [   0:0] ctrl$wen;
  wire   [   0:0] ctrl$deq_val;
  wire   [   0:0] ctrl$raddr;
  wire   [   1:0] ctrl$num_free_entries;
  wire   [   0:0] ctrl$enq_rdy;

  NormalQueueCtrl_0x7a42a348c9205b5 ctrl
  (
    .clk              ( ctrl$clk ),
    .enq_val          ( ctrl$enq_val ),
    .reset            ( ctrl$reset ),
    .deq_rdy          ( ctrl$deq_rdy ),
    .waddr            ( ctrl$waddr ),
    .wen              ( ctrl$wen ),
    .deq_val          ( ctrl$deq_val ),
    .raddr            ( ctrl$raddr ),
    .num_free_entries ( ctrl$num_free_entries ),
    .enq_rdy          ( ctrl$enq_rdy )
  );

    wire   [   0:0] dpath$waddr;
  wire   [   0:0] dpath$clk;
  wire   [   0:0] dpath$wen;
  wire   [   0:0] dpath$raddr;
  wire   [   0:0] dpath$reset;
  wire   [ 122:0] dpath$enq_bits;
  wire   [ 122:0] dpath$deq_bits;

  NormalQueueDpath_0x5dd41d218822a9f2 dpath
  (
    .waddr    ( dpath$waddr ),
    .clk      ( dpath$clk ),
    .wen      ( dpath$wen ),
    .raddr    ( dpath$raddr ),
    .reset    ( dpath$reset ),
    .enq_bits ( dpath$enq_bits ),
    .deq_bits ( dpath$deq_bits )
  );

    assign ctrl$clk         = clk;
  assign ctrl$deq_rdy     = deq_rdy;
  assign ctrl$enq_val     = enq_val;
  assign ctrl$reset       = reset;
  assign deq_msg          = dpath$deq_bits;
  assign deq_val          = ctrl$deq_val;
  assign dpath$clk        = clk;
  assign dpath$enq_bits   = enq_msg;
  assign dpath$raddr      = ctrl$raddr;
  assign dpath$reset      = reset;
  assign dpath$waddr      = ctrl$waddr;
  assign dpath$wen        = ctrl$wen;
  assign enq_rdy          = ctrl$enq_rdy;
  assign num_free_entries = ctrl$num_free_entries;



endmodule 


module NormalQueueCtrl_0x7a42a348c9205b5
(
  input  wire [   0:0] clk,
  input  wire [   0:0] deq_rdy,
  output reg  [   0:0] deq_val,
  output reg  [   0:0] enq_rdy,
  input  wire [   0:0] enq_val,
  output reg  [   1:0] num_free_entries,
  output reg  [   0:0] raddr,
  input  wire [   0:0] reset,
  output reg  [   0:0] waddr,
  output reg  [   0:0] wen
);

    reg    [   0:0] deq_ptr;
  reg    [   0:0] deq_ptr_inc;
  reg    [   0:0] deq_ptr_next;
  reg    [   0:0] do_deq;
  reg    [   0:0] do_enq;
  reg    [   0:0] empty;
  reg    [   0:0] enq_ptr;
  reg    [   0:0] enq_ptr_inc;
  reg    [   0:0] enq_ptr_next;
  reg    [   0:0] full;
  reg    [   0:0] full_next_cycle;

    localparam last_idx = 1;
  localparam num_entries = 2;



                              
    always @ (posedge clk) begin
    if (reset) begin
      deq_ptr <= 0;
    end
    else begin
      deq_ptr <= deq_ptr_next;
    end
    if (reset) begin
      enq_ptr <= 0;
    end
    else begin
      enq_ptr <= enq_ptr_next;
    end
    if (reset) begin
      full <= 0;
    end
    else begin
      if (full_next_cycle) begin
        full <= 1;
      end
      else begin
        if ((do_deq&&full)) begin
          full <= 0;
        end
        else begin
          full <= full;
        end
      end
    end
  end

                                                                                                                
    always @ (*) begin
    empty = (!full&&(enq_ptr == deq_ptr));
    enq_rdy = !full;
    deq_val = !empty;
    do_enq = (enq_rdy&&enq_val);
    do_deq = (deq_rdy&&deq_val);
    wen = do_enq;
    waddr = enq_ptr;
    raddr = deq_ptr;
    if ((enq_ptr == last_idx)) begin
      enq_ptr_inc = 0;
    end
    else begin
      enq_ptr_inc = (enq_ptr+1);
    end
    if ((deq_ptr == last_idx)) begin
      deq_ptr_inc = 0;
    end
    else begin
      deq_ptr_inc = (deq_ptr+1);
    end
    if (do_enq) begin
      enq_ptr_next = enq_ptr_inc;
    end
    else begin
      enq_ptr_next = enq_ptr;
    end
    if (do_deq) begin
      deq_ptr_next = deq_ptr_inc;
    end
    else begin
      deq_ptr_next = deq_ptr;
    end
    if (reset) begin
      num_free_entries = num_entries;
    end
    else begin
      if (full) begin
        num_free_entries = 0;
      end
      else begin
        if (empty) begin
          num_free_entries = num_entries;
        end
        else begin
          if ((enq_ptr > deq_ptr)) begin
            num_free_entries = (num_entries-(enq_ptr-deq_ptr));
          end
          else begin
            if ((deq_ptr > enq_ptr)) begin
              num_free_entries = (deq_ptr-enq_ptr);
            end
            else begin
            end
          end
        end
      end
    end
    full_next_cycle = (do_enq&&!do_deq&&(enq_ptr_next == deq_ptr));
  end


endmodule 


module NormalQueueDpath_0x5dd41d218822a9f2
(
  input  wire [   0:0] clk,
  output wire [ 122:0] deq_bits,
  input  wire [ 122:0] enq_bits,
  input  wire [   0:0] raddr,
  input  wire [   0:0] reset,
  input  wire [   0:0] waddr,
  input  wire [   0:0] wen
);

    wire   [   0:0] queue$rd_addr$000;
  wire   [ 122:0] queue$wr_data;
  wire   [   0:0] queue$clk;
  wire   [   0:0] queue$wr_addr;
  wire   [   0:0] queue$wr_en;
  wire   [   0:0] queue$reset;
  wire   [ 122:0] queue$rd_data$000;

  RegisterFile_0x2ed8d4d847799d23 queue
  (
    .rd_addr$000 ( queue$rd_addr$000 ),
    .wr_data     ( queue$wr_data ),
    .clk         ( queue$clk ),
    .wr_addr     ( queue$wr_addr ),
    .wr_en       ( queue$wr_en ),
    .reset       ( queue$reset ),
    .rd_data$000 ( queue$rd_data$000 )
  );

    assign deq_bits          = queue$rd_data$000;
  assign queue$clk         = clk;
  assign queue$rd_addr$000 = raddr;
  assign queue$reset       = reset;
  assign queue$wr_addr     = waddr;
  assign queue$wr_data     = enq_bits;
  assign queue$wr_en       = wen;



endmodule 


module RegisterFile_0x2ed8d4d847799d23
(
  input  wire [   0:0] clk,
  input  wire [   0:0] rd_addr$000,
  output wire [ 122:0] rd_data$000,
  input  wire [   0:0] reset,
  input  wire [   0:0] wr_addr,
  input  wire [ 122:0] wr_data,
  input  wire [   0:0] wr_en
);

    wire   [ 122:0] regs$000;
  wire   [ 122:0] regs$001;


    localparam nregs = 2;
  localparam rd_ports = 1;

    integer i;


    wire   [   0:0] rd_addr[0:0];
  assign rd_addr[  0] = rd_addr$000;
  reg    [ 122:0] rd_data[0:0];
  assign rd_data$000 = rd_data[  0];
  reg    [ 122:0] regs[0:1];
  assign regs$000 = regs[  0];
  assign regs$001 = regs[  1];

            
    always @ (posedge clk) begin
    if (wr_en) begin
      regs[wr_addr] <= wr_data;
    end
    else begin
    end
  end

              
    always @ (*) begin
    for (i=0; i < rd_ports; i=i+1)
    begin
      rd_data[i] = regs[rd_addr[i]];
    end
  end


endmodule 


module Mux_0x1912657ca4782f9b
(
  input  wire [   0:0] clk,
  input  wire [ 252:0] in_$000,
  input  wire [ 252:0] in_$001,
  output reg  [ 252:0] out,
  input  wire [   0:0] reset,
  input  wire [   0:0] sel
);

    localparam nports = 2;


    wire   [ 252:0] in_[0:1];
  assign in_[  0] = in_$000;
  assign in_[  1] = in_$001;

            
    always @ (*) begin
    out = in_[sel];
  end


endmodule 


module Mux_0x5dd7789b2f4c8d77
(
  input  wire [   0:0] clk,
  input  wire [   0:0] in_$000,
  input  wire [   0:0] in_$001,
  output reg  [   0:0] out,
  input  wire [   0:0] reset,
  input  wire [   0:0] sel
);

    localparam nports = 2;


    wire   [   0:0] in_[0:1];
  assign in_[  0] = in_$000;
  assign in_[  1] = in_$001;

            
    always @ (*) begin
    out = in_[sel];
  end


endmodule 


module BnnXcelHLS_0x2e9f1d2da3d1f4f1
(
  input  wire [   0:0] clk,
  output wire [ 109:0] memreq_msg,
  input  wire [   0:0] memreq_rdy,
  output wire [   0:0] memreq_val,
  input  wire [  79:0] memresp_msg,
  output reg  [   0:0] memresp_rdy,
  input  wire [   0:0] memresp_val,
  input  wire [   0:0] reset,
  input  wire [ 159:0] xcelreq_msg,
  output reg  [   0:0] xcelreq_rdy,
  input  wire [   0:0] xcelreq_val,
  output wire [  68:0] xcelresp_msg,
  input  wire [   0:0] xcelresp_rdy,
  output wire [   0:0] xcelresp_val
);

    reg    [   0:0] xcel$memreq_rdy;
  reg    [   0:0] xcel$xcelresp_rdy;

    wire   [  79:0] xcel$memresp_msg;
  wire   [   0:0] xcel$memresp_val;
  wire   [   0:0] xcel$clk;
  wire   [ 159:0] xcel$xcelreq_msg;
  wire   [   0:0] xcel$xcelreq_val;
  wire   [   0:0] xcel$reset;
  wire   [   0:0] xcel$memresp_rdy;
  wire   [   0:0] xcel$xcelreq_rdy;
  wire   [ 109:0] xcel$memreq_msg;
  wire   [   0:0] xcel$memreq_val;
  wire   [  68:0] xcel$xcelresp_msg;
  wire   [   0:0] xcel$xcelresp_val;

  BnnXcelHLS_v_0x6177ce9562989444 xcel
  (
    .memresp_msg  ( xcel$memresp_msg ),
    .memresp_val  ( xcel$memresp_val ),
    .clk          ( xcel$clk ),
    .xcelreq_msg  ( xcel$xcelreq_msg ),
    .xcelreq_val  ( xcel$xcelreq_val ),
    .reset        ( xcel$reset ),
    .memreq_rdy   ( xcel$memreq_rdy ),
    .xcelresp_rdy ( xcel$xcelresp_rdy ),
    .memresp_rdy  ( xcel$memresp_rdy ),
    .xcelreq_rdy  ( xcel$xcelreq_rdy ),
    .memreq_msg   ( xcel$memreq_msg ),
    .memreq_val   ( xcel$memreq_val ),
    .xcelresp_msg ( xcel$xcelresp_msg ),
    .xcelresp_val ( xcel$xcelresp_val )
  );

    assign memreq_msg       = xcel$memreq_msg;
  assign memreq_val       = xcel$memreq_val;
  assign xcel$clk         = clk;
  assign xcel$memresp_msg = memresp_msg;
  assign xcel$memresp_val = memresp_val;
  assign xcel$reset       = reset;
  assign xcel$xcelreq_msg = xcelreq_msg;
  assign xcel$xcelreq_val = xcelreq_val;
  assign xcelresp_msg     = xcel$xcelresp_msg;
  assign xcelresp_val     = xcel$xcelresp_val;


                    
    always @ (*) begin
    xcel$memreq_rdy = ~memreq_rdy;
    memresp_rdy = ~xcel$memresp_rdy;
    xcel$xcelresp_rdy = ~xcelresp_rdy;
    xcelreq_rdy = ~xcel$xcelreq_rdy;
  end


endmodule 


module BnnXcelHLS_v_0x6177ce9562989444
(
  input  wire [   0:0] clk,
  output wire [ 109:0] memreq_msg,
  input  wire [   0:0] memreq_rdy,
  output wire [   0:0] memreq_val,
  input  wire [  79:0] memresp_msg,
  output wire [   0:0] memresp_rdy,
  input  wire [   0:0] memresp_val,
  input  wire [   0:0] reset,
  input  wire [ 159:0] xcelreq_msg,
  output wire [   0:0] xcelreq_rdy,
  input  wire [   0:0] xcelreq_val,
  output wire [  68:0] xcelresp_msg,
  input  wire [   0:0] xcelresp_rdy,
  output wire [   0:0] xcelresp_val
);

    
  BnnXcelHLS_v#(

  )